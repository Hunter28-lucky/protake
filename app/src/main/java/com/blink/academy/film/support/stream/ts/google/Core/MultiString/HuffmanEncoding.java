package com.blink.academy.film.support.stream.ts.google.Core.MultiString;

import androidx.exifinterface.media.ExifInterface;
import com.blink.academy.film.support.stream.ts.TsConstants;
import com.blink.academy.film.support.stream.ts.google.API.BitOutputStream;
import com.umeng.analytics.pro.cb;
import io.michaelrocks.libphonenumber.android.PhoneNumberUtil;
import java.util.TreeMap;
import okio.Utf8;

/* loaded from: classes.dex */
public class HuffmanEncoding {
    private static TreeMap<Byte, TreeMap<Byte, String>> ATSC_C4_encode_map = new TreeMap<>();
    private static TreeMap<Byte, TreeMap<Byte, String>> ATSC_C6_encode_map = new TreeMap<>();
    private static boolean bInitialized = false;
    private static final byte[] ATSC_C4_PRIOR = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, cb.k, cb.l, cb.m, cb.n, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, TsConstants.ACESType_h264, 28, 29, 30, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 34, 35, TsConstants.ACESType_h265, TsConstants.ACESType_h265, 37, 38, 38, 39, 39, 39, 39, 39, 39, 40, 41, ExifInterface.START_CODE, ExifInterface.START_CODE, ExifInterface.START_CODE, ExifInterface.START_CODE, 43, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 52, 52, 53, 54, 55, 55, 56, 56, 57, 57, 57, 57, 57, 58, 58, 59, 60, 61, 62, Utf8.REPLACEMENT_BYTE, Utf8.REPLACEMENT_BYTE, TsConstants.ACESType_data, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 89, 89, 89, 89, 90, 90, 90, 91, 92, 93, 94, 95, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 123, 124, 125, 126, Byte.MAX_VALUE};
    private static final byte[] ATSC_C4_SYMBOL = {TsConstants.ACESType_h264, TsConstants.ACESType_h265, 50, 52, 55, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 38, 39, 45, 49, 50, 51, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 105, 108, 111, 116, 0, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 49, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, 32, 57, 100, 115, 116, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 65, 72, 83, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, 32, 45, 49, 65, 77, 82, 83, 84, 85, 0, TsConstants.ACESType_h264, 32, 46, 73, 83, 87, TsConstants.ACESType_h264, 0, TsConstants.ACESType_h264, 32, 45, 48, 0, TsConstants.ACESType_h264, 32, 48, 49, 50, 57, 0, TsConstants.ACESType_h264, 48, 49, 58, 0, TsConstants.ACESType_h264, 48, TsConstants.ACESType_h264, 56, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 48, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, 48, 49, 51, 57, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 0, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, ExifInterface.START_CODE, 45, 46, 66, 98, 99, 100, 102, 103, 105, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, TsConstants.ACESType_h264, 65, 67, 83, 97, 101, 105, 108, 111, 114, 117, TsConstants.ACESType_h264, 32, 65, 66, 79, 97, 101, 104, 105, 108, 111, 114, 117, 121, TsConstants.ACESType_h264, 97, 101, 105, 111, 114, 117, 121, TsConstants.ACESType_h264, 67, 97, 100, 108, 109, 110, 113, 115, 117, 118, 120, 121, TsConstants.ACESType_h264, 32, 76, 97, 101, 105, 108, 111, 114, 117, TsConstants.ACESType_h264, 46, 65, 97, 101, 104, 105, 108, 111, 114, 117, 121, 0, TsConstants.ACESType_h264, 97, 101, 105, 111, 117, 0, TsConstants.ACESType_h264, 32, 46, 58, 73, 84, 99, 109, 110, 114, 115, 116, TsConstants.ACESType_h264, 97, 101, 111, 117, TsConstants.ACESType_h264, 97, 101, 105, 110, 111, 117, TsConstants.ACESType_h264, 32, 97, 101, 105, 111, 117, TsConstants.ACESType_h264, ExifInterface.START_CODE, 84, 97, 99, 101, 105, 111, 114, 117, 121, TsConstants.ACESType_h264, 32, 66, 70, 78, 97, 101, 105, 111, 117, TsConstants.ACESType_h264, 32, 100, 102, 108, 110, 112, 114, 115, 117, 118, 119, TsConstants.ACESType_h264, 32, 46, 71, 82, 97, 101, 105, 108, 111, 114, 115, 117, 121, TsConstants.ACESType_h264, 86, 117, TsConstants.ACESType_h264, 97, 101, 104, 105, 111, 117, TsConstants.ACESType_h264, 32, ExifInterface.START_CODE, 46, 97, 99, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 116, 117, 119, TsConstants.ACESType_h264, 45, 78, 86, 97, 101, 104, 105, 111, 114, 117, 119, TsConstants.ACESType_h264, 46, 108, 110, 112, 0, TsConstants.ACESType_h264, 32, 67, 97, 101, 105, 111, TsConstants.ACESType_h264, 70, 87, 97, 101, 104, 105, 111, 114, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 97, 101, 111, TsConstants.ACESType_h264, 97, 111, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 0, TsConstants.ACESType_h264, 32, 39, 58, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, TsConstants.ACESType_h264, 32, 97, 98, 101, 105, 108, 111, 114, 115, 117, 121, 0, TsConstants.ACESType_h264, 32, 67, 71, 76, 97, 99, 101, 104, 105, 107, 108, 111, 114, 115, 116, 117, 121, 0, TsConstants.ACESType_h264, 32, 46, 97, 100, 101, 103, 105, 108, 111, 114, 115, 117, 118, 119, 121, 0, TsConstants.ACESType_h264, 32, 33, 39, 45, 58, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, TsConstants.ACESType_h264, 32, 97, 101, 102, 105, 108, 111, 114, 115, 116, 117, 0, TsConstants.ACESType_h264, 32, 39, 58, 97, 101, 103, 104, 105, 108, 110, 111, 114, 115, 116, 117, 121, 0, TsConstants.ACESType_h264, 32, 97, 98, 101, 105, 108, 110, 111, 114, 116, 117, 119, 121, 0, TsConstants.ACESType_h264, 32, 33, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 122, TsConstants.ACESType_h264, 97, 111, 0, TsConstants.ACESType_h264, 32, 58, 84, 97, 101, 102, 105, 108, 111, 115, 119, 121, 0, TsConstants.ACESType_h264, 32, 39, 45, 58, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 111, 114, 115, 116, 117, 118, 119, 121, 0, TsConstants.ACESType_h264, 32, 97, 98, 101, 105, 109, 111, 112, 115, 117, 121, 0, TsConstants.ACESType_h264, 32, 39, 58, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 121, 122, 0, TsConstants.ACESType_h264, 32, 39, 46, Utf8.REPLACEMENT_BYTE, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, TsConstants.ACESType_h264, 32, 39, 97, 100, 101, 104, 105, 108, 109, 111, 112, 114, 115, 116, 121, TsConstants.ACESType_h264, 117, 0, TsConstants.ACESType_h264, 32, 39, 44, 46, 58, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 0, TsConstants.ACESType_h264, 32, 39, 44, 46, 58, Utf8.REPLACEMENT_BYTE, 67, 72, 97, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 121, 0, TsConstants.ACESType_h264, 32, 39, 58, Utf8.REPLACEMENT_BYTE, 97, 98, 99, 100, 101, 104, 105, 108, 109, 110, 111, 114, 115, 116, 117, 119, 121, 0, TsConstants.ACESType_h264, 32, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 112, 114, 115, 116, 122, TsConstants.ACESType_h264, 97, 101, 105, 111, 115, 0, TsConstants.ACESType_h264, 32, 39, 97, 98, 99, 101, 105, 108, 110, 111, 114, 115, 0, TsConstants.ACESType_h264, 32, 97, 101, 105, 112, 116, 0, TsConstants.ACESType_h264, 32, 33, 39, 45, 97, 98, 99, 100, 101, 105, 108, 109, 110, 111, 112, 115, 116, 118, 119, 0, TsConstants.ACESType_h264, 32, 97, 101, 105, 121, 122, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264};
    private static final String[] ATSC_C4_CODE = {"11001011", "1100101011", "011010010", "1100101010", "011010011", "0111", "1001", "1011", "11011", "10001", "11000", "11100", "11111", "10000", "01100", "1100110", "11101", "1010", "0011", "011011", "11110", "01101000", "11010", "000", "010", "0110101", "1100111", "0010", "1100100", "110010100", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "10010100", "010001", "010000100", "00000001", "010000101", "00000010", "01000001", "000000000", "10111", "0010", "1100", "11100", "011010", "10011", "00001", "10101", "111111", "111110", "010011", "11110", "0101", "10110", "011011", "11101", "100100011", "10100", "1101", "1000", "1001001", "1001011", "0011", "0000000010", "000001", "00000011", "01100", "10010101", "01000000", "01000011", "0000000011", "10010000", "010010", "100100010", "0001", "0111", "1", "01", "00", "1", "1", "1", "0", "1", "0", "1", "011", "010", "0001", "0000", "1", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1", "1", "00", "01", "10", "11", "1", "0", "1", "01", "111", "1101", "1000", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "000", "1001", "1010", "1011", "1100", "111", "101", "0", "110", "10010", "1000", "10011", "1", "01", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "10", "000", "11", "010", "011", "110", "111", "100", "101", "00", "11", "10", "01", "000", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "0", "11", "10", "0", "1", "1", "1", "0", "1", "0", "1", "11", "01", "100", "101", "00", "0", "1", "1", "1", "1", "1", "1", "0", "1", "00010", "010", "1101000", "1101001", "1101010", "110110", "110010", "01100", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "01101", "011110", "110011", "100", "111", "101", "110111", "0000", "00011", "011111", "11000", "1101011", "01110", "00010", "000110", "0000", "000111", "111", "01", "1010", "1011", "110", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "100", "00101", "10110", "0011100", "001111", "101110", "100", "101111", "01", "00110", "000", "11", "1010", "00100", "0011101", "01001", "10", "111", "110", "00", "011", "0101", "01000", "011", "1010", "111", "000", "1100", "0100", "1101", "101110", "10110", "101111", "100", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "0101", "011111", "011110", "01110", "10", "0110", "110", "000", "010", "111", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "10110", "101010", "101111", "1110", "110", "10100", "100", "101011", "01", "00", "1111", "101110", "111010", "111011", "110", "10", "1111", "0", "11100", "1000", "1001", "11110", "111110", "101110", "1100", "101111", "10110", "1010", "0", "111111", "1101", "1110", "000", "01", "11", "10", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "000", "0100", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1", "0111", "0101", "0110", "01001", "01000", "10", "011", "11", "00", "0101", "1011111", "10111100", "10111101", "11", "101110", "1010", "100", "00", "10110", "010", "011", "1000", "110001", "1001", "110010", "110000", "1101", "0", "111", "101", "110011", "010", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "01110", "11010", "1100", "10", "0001", "0110", "01111", "111", "11011", "0000", "111111", "1111100", "011001", "111101", "111100", "00", "010", "0111", "1110", "110", "10", "1111101", "01101", "011000", "00", "01", "1", "10001", "101", "11", "10000", "00", "01", "1001", "101110", "1110100", "1011000", "1011011", "1111", "11100", "000", "100", "1100", "101111", "1011001", "1110110", "1110111", "1010", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1011010", "01", "1101", "1110101", "1111010", "11110110", "11110111", "111100", "1010", "1011", "0", "1110", "110", "100", "111110", "111111", "101", "1001", "1000", "0", "11", "000", "0011", "01010", "01011", "011", "0100", "1", "0010", "00011", "000100", "000101", "111", "110", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "01", "10", "0000", "1", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "000", "01", "1", "00", "01", "1", "1", "1", "1", "1", "1", "1", "00010", "1111010110", "10110", "11110100", "1111010111", "010010", "11111", "10100", "101011000", "10101101", "01000", "0100111", "10111", "101011001", "101010", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "0101", "110", "111100", "100", "1110", "011", "1111011", "00011", "1010111", "111101010", "0000", "0100110", "11111", "111101", "0110", "00", "01111", "1010", "1110", "010", "110", "1011", "111100", "01110", "100", "010110", "1000011", "0100", "0010110", "1000010", "0010111", "011", "001010", "111", "101", "0011", "110", "010111", "1001", "10001", "00100", "000", "01010", "100000", "011", "101110", "11", "101101110", "1010", "100000", "00", "100001", "1001", "1011010", "101111", "101100", "0101", "101101111", "10001", "10110110", "0100", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1010111100", "01", "1010111101", "10101100", "1010111110", "00010010", "1000", "10101101", "100111", "00011", "10100", "1001100", "1010100", "1010111111", "10101110", "000100000", "1010101", "10010", "1001101", "1110", "000101", "000001", "000100001", "110", "1111", "10110", "000100010", "000000", "10111", "00010011", "00001", "000100011", "11100", "1111001", "0", "11101", "110", "1011", "1001", "111101", "1010", "111111", "111110", "1000", "1111000", "110", "1110000", "01", "1001100", "11100010", "1000", "101", "1111010", "00", "11101", "1111011", "100111", "111001", "10010", "11111", "1001101", "111100", "11100011", "11101", "1110001", "1011", "1100", "11100110", "0", "100", "1110010", "101001", "1101", "10101", "1111", "11100111", "1110000", "101000", "00110101", "00110110", "000100", "001101000", "00011", "0011000", "1111", "0010", "1101", "00111", "1100", "00110010", "00110011", "0110", "11101", "10", "0100", "000101", "11100", "0111", "0101", "0000", "001101001", "00110111", "10", "11", "0", "01", "00011", "111", "00001", "000000", "001111", "10", "000100", "110", "000101", "000001", "0010", "001110", "00110", "1000", "0111001", "010", "01100010", "11110011", "01100011", "1110", "0110000", "01110000", "000", "110", "1111000", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "011001", "101", "1111010", "11111", "11110010", "01101", "011101", "01111", "1111011", "01110001", "1001", "0100", "010101", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "101", "0000", "11", "011", "0001", "1001", "1000", "010111", "010110", "010100", "000", "01110011", "110", "011101", "1001010", "11100", "111010000", "01111", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "010", "1001011", "101", "111010101", "1000", "111010001", "1110110", "111010110", "111010111", "10011", "1110111", "111010100", "0110", "1111", "11101001", "0111000", "100100", "01110010", "00101", "01110001", "0101", "01110000", "0111011010", "011101100", "1100010", "001001", "110000", "01111", "0111001", "1001", "00010", "0111010", "01110111", "1100011", "0100", "1000", "111", "0011", "01101", "101", "11001", "00011", "1101", "01100", "0000", "0010000", "0010001", "0111011011", "1101", "101110", "010", "1100101", "1001", "101111", "111", "11000", "1010", "0110", "1100100", "00", "0111", "10001", "10000", "10110", "110011", "0", "1", "1001", "01100101", "1111", "0110011", "110011101", "0111100", "110011100", "000", "01111101", "0111111", "11000", "101", "11001111", "0111101", "010", "110010", "0011", "011000", "01101", "1101", "01111100", "01110", "1110", "1000", "1100110", "01100100", "0010", "11", "0010011", "01", "001011010", "001011011", "00100101", "0000001", "001011100", "001011101", "001011110", "101010", "101011", "001011111", "1011", "00000000", "00001", "0011", "000001", "00101010", "00000001", "00101011", "10100", "001000", "00100100", "0001", "100", "0010100", "00101100", "010", "11000010", "101", "11000011", "110110000", "110110001", "0000", "100000", "1101101", "11000000", "011", "111", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "10001", "100001", "11011001", "1001", "11010", "0001", "110111", "11001", "11000001", "110001", "0011110", "000100", "001110", "00110", "10011", "11100", "10000", "0010", "0011111", "11101", "00011", "0001010", "0000", "10010", "110", "10001", "01", "101", "1111", "0001011", "0010", "000", "1", "01", "00111", "00110", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "01010", "011", "010010", "000", "010011", "010111", "1111", "1100", "010110", "1110", "1101", "01000", "10", "110", "1010", "1011", "000", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "100", "111", "01", "10", "111110", "0", "1101101", "110101", "11110101", "1101110", "1111011", "11110100", "1100000", "11001", "1100001", "111111", "1101111", "1100010", "1100011", "1101000", "1110", "1101001", "1101100", "111100", "110", "100", "000", "01", "1010", "111", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1011", "1", "1", "1", "1", "1"};
    private static final byte[] ATSC_C6_PRIOR = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, cb.k, cb.l, cb.m, cb.n, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, TsConstants.ACESType_h264, 28, 29, 30, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 34, 34, 34, 34, 34, 34, 35, TsConstants.ACESType_h265, 37, 38, 39, 39, 39, 39, 40, 41, 41, ExifInterface.START_CODE, 43, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 47, 47, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 55, 55, 55, 56, 57, 57, 57, 57, 57, 58, 58, 59, 59, 60, 61, 62, Utf8.REPLACEMENT_BYTE, Utf8.REPLACEMENT_BYTE, TsConstants.ACESType_data, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 81, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 88, 89, 89, 90, 91, 92, 93, 94, 95, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 124, 125, 126, Byte.MAX_VALUE};
    private static final byte[] ATSC_C6_SYMBOL = {TsConstants.ACESType_h264, 34, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 34, 40, 45, 47, 49, 50, 51, 52, 53, 55, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, TsConstants.ACESType_h264, 0, TsConstants.ACESType_h264, 32, 46, 72, 84, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, 115, 116, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 44, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, 34, TsConstants.ACESType_h264, 32, 97, 98, 99, 100, 101, 102, 114, 115, 0, TsConstants.ACESType_h264, 32, 34, 74, 83, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, 32, 48, 55, 115, 116, TsConstants.ACESType_h264, 32, 56, 57, TsConstants.ACESType_h264, 32, 46, 54, TsConstants.ACESType_h264, 32, 48, TsConstants.ACESType_h264, 32, 46, TsConstants.ACESType_h264, 32, 46, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 44, 46, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, 53, 54, 56, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, 100, 102, 108, 109, 110, 114, 115, 116, 117, TsConstants.ACESType_h264, 97, 101, 105, 108, 111, 114, 117, TsConstants.ACESType_h264, 97, 104, 105, 108, 111, 114, 117, 121, TsConstants.ACESType_h264, 97, 101, 105, 111, 114, 117, 121, TsConstants.ACESType_h264, 97, 100, 105, 108, 110, 114, 115, 118, TsConstants.ACESType_h264, 101, 108, 111, 114, TsConstants.ACESType_h264, 97, 101, 105, 108, 111, 114, 117, TsConstants.ACESType_h264, 97, 101, 105, 111, 117, TsConstants.ACESType_h264, 32, 46, 73, 110, 114, 115, TsConstants.ACESType_h264, 46, 97, 101, 105, 111, 117, TsConstants.ACESType_h264, 97, 101, 105, 114, TsConstants.ACESType_h264, 97, 101, 105, 111, 117, TsConstants.ACESType_h264, 97, 99, 101, 105, 111, 117, TsConstants.ACESType_h264, 97, 101, 105, 111, TsConstants.ACESType_h264, 39, 108, 110, 114, 115, TsConstants.ACESType_h264, 97, 101, 104, 105, 108, 111, 114, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 46, 97, 101, 105, 111, TsConstants.ACESType_h264, 46, 97, 99, 101, 104, 105, 111, 116, 117, 118, 121, TsConstants.ACESType_h264, 86, 97, 101, 104, 105, 111, 114, 119, TsConstants.ACESType_h264, 46, 110, TsConstants.ACESType_h264, 32, 101, 105, TsConstants.ACESType_h264, 97, 101, 104, 105, 111, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 111, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, 32, 39, 46, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, TsConstants.ACESType_h264, 32, 46, 97, 98, 100, 101, 105, 108, 111, 114, 115, 117, 121, TsConstants.ACESType_h264, 32, 44, 46, 68, 97, 99, 101, 104, 105, 107, 108, 111, 113, 114, 116, 117, 121, TsConstants.ACESType_h264, 32, 39, 44, 46, 59, 97, 100, 101, 102, 103, 105, 108, 109, 110, 111, 114, 115, 117, 118, 119, 121, TsConstants.ACESType_h264, 32, 39, 41, 44, 45, 46, 59, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, TsConstants.ACESType_h264, 32, 46, 97, 101, 102, 105, 108, 111, 114, 116, 117, TsConstants.ACESType_h264, 32, 39, 44, 45, 46, 97, 101, 103, 104, 105, 108, 111, 114, 115, 117, 121, TsConstants.ACESType_h264, 32, 39, 44, 45, 46, 97, 101, 105, 110, 111, 114, 115, 116, 117, 121, TsConstants.ACESType_h264, 32, 44, 46, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 120, 122, TsConstants.ACESType_h264, 97, 101, 111, 117, TsConstants.ACESType_h264, 32, 39, 44, 46, 101, 105, 108, 110, 115, 121, TsConstants.ACESType_h264, 32, 39, 44, 45, 46, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, TsConstants.ACESType_h264, 32, 39, 46, 59, 97, 98, 101, 105, 109, 111, 112, 115, 117, 121, TsConstants.ACESType_h264, 32, 39, 44, 45, 46, 59, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 121, 122, TsConstants.ACESType_h264, 32, 44, 45, 46, 66, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, TsConstants.ACESType_h264, 32, 45, 46, 97, 101, 104, 105, 108, 109, 111, 112, 114, 115, 116, 117, 121, TsConstants.ACESType_h264, 117, TsConstants.ACESType_h264, 32, 39, 41, 44, 45, 46, 59, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, TsConstants.ACESType_h264, 32, 34, 39, 44, 46, 59, 97, 98, 99, 101, 104, 105, 107, 108, 109, 110, 111, 112, 115, 116, 117, 119, 121, TsConstants.ACESType_h264, 32, 39, 44, 45, 46, 59, 97, 98, 99, 101, 104, 105, 108, 109, 110, 111, 114, 115, 116, 117, 119, 121, TsConstants.ACESType_h264, 32, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 121, TsConstants.ACESType_h264, 97, 101, 105, 111, 115, 121, TsConstants.ACESType_h264, 32, 46, 97, 101, 104, 105, 108, 109, 110, 111, 114, 115, TsConstants.ACESType_h264, 32, 44, 45, 97, 101, 105, 116, TsConstants.ACESType_h264, 32, 39, 44, 46, 59, Utf8.REPLACEMENT_BYTE, 97, 98, 100, 101, 102, 105, 108, 109, 110, 111, 115, 119, TsConstants.ACESType_h264, 32, 46, 97, 101, 105, 108, 111, 122, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264, TsConstants.ACESType_h264};
    private static final String[] ATSC_C6_CODE = {"1110000", "111001", "010", "0011", "0111", "11101", "10010", "10110", "011011", "10111", "011000", "1100", "00101", "10011", "1111", "00100", "011001", "000", "1000", "1010", "1101", "1110001", "011010", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "101000001", "111111010", "1111111100", "11111111110", "11111111111", "0101011", "0100010", "1111111101", "110010100", "1111111110", "1010000000", "10010", "010100", "111100", "1111010", "0100011", "0101010", "000010", "1111011", "11001011", "000011", "1100100", "010110", "101001", "001100", "10100001", "001101", "1111100", "01001", "1100110", "111111011", "111111100", "010000", "111111101", "1010000001", "011", "10111", "10011", "10000", "100010", "11101", "100011", "0001", "10101", "11001111", "11111010", "010111", "00000", "1010001", "0010", "10110", "110010101", "00111", "11100", "1101", "11111011", "11111100", "11000", "11001110", "1", "000", "10", "11", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "010", "011", "1", "1", "1", "1", "00", "010", "1", "011", "1", "1", "0", "1", "1", "00", "1", "01", "10", "1110", "000", "0010", "110", "0011", "0100", "0101", "1111", "011", "1", "000", "01", "0010", "00110", "00111", "0", "1", "100", "111", "00", "101", "01", "110", "111", "10", "110", "0", "101", "11", "0", "100", "10", "0", "11", "10", "11", "0", "11", "10", "0", "1", "0", "10", "11", "1", "110", "111", "00", "01", "10", "0", "1", "0", "1", "1", "1", "1", "0", "1", "1", "10010", "11", "10011", "101000", "00", "10101", "01", "1011", "10000", "10001", "101001", "10010", "101", "111", "00", "10011", "110", "01", "1000", "01110", "00", "10", "01111", "110", "111", "0101", "0110", "0100", "1111", "01", "100", "00", "101", "1101", "1110", "1100", "10", "0110", "000", "0111", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1100", "111", "010", "1101", "00", "100", "101", "01", "11", "000", "110", "01", "100", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1011", "111", "1010", "010", "00", "011", "110", "10", "111", "011", "000", "100", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "11", "101", "010", "1000", "1001", "111", "1101", "1100", "0", "101", "111", "100", "0", "101", "110", "0110", "11", "00", "0111", "10", "010", "11010", "0", "11011", "1111", "10", "1100", "1110", "1100", "111", "0", "1101", "10", "10", "010", "110", "011", "111", "00", "10010", "0", "111", "10011", "1000", "1101", "101", "1100", "1", "0000", "0001", "01", "10", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "11", "1011", "0001", "100", "0010", "1110", "110", "0011", "1111", "01", "1010", "00000", "00001", "1010", "1000", "1001", "11010", "0", "1011", "111", "1100", "11011", "10", "0", "11", "111", "10", "110", "0", "010", "111", "110", "011", "10", "00", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "111001101", "101", "111001110", "1110010", "001011", "11001", "00111", "0011001", "001010", "00100", "001100010", "111000", "110000", "1101", "11101", "01", "001100011", "00000", "100", "0001", "1111", "110001", "001101", "111001111", "111001100", "00001", "00110000", "101000", "0101", "101001", "100", "101010", "1010110", "00", "1011", "0100", "110", "1110", "1010111", "1111", "011", "00010", "10000", "010000", "0100011", "0100110", "110", "010010", "011", "111", "0101", "1001", "10001", "101", "0100010", "00011", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "0000", "0100111", "1010001", "11", "01111010", "101011", "0100", "01111011", "1000", "01010", "00", "10100000", "10101011", "1011", "011111", "10100001", "1010100", "0110", "01110", "1001", "101001", "0111100", "10101010", "01011", "101110011", "111", "10111010", "100110000", "000111", "10011001", "00110", "10011010", "1000", "0001100", "10010", "0000", "10100", "10111011", "0001101", "100110001", "000100", "10011011", "0010", "100111", "010", "001110", "001111", "110", "011", "10101", "101110010", "101100", "101111", "000101", "101101", "10111000", "1110111", "10", "1110110", "1111", "000", "0101", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "111010", "110", "011", "0100", "11100", "1111010", "10", "1111011", "111110", "0101010", "01011", "1110", "00", "0101011", "011", "1101", "111100", "0100", "111111", "11000", "11001", "010100", "1011100", "100", "10101000", "10101001", "10101011", "101001", "011", "11", "00", "101011", "010", "101111", "10101010", "10110", "101000", "1011101", "00011101", "0001111", "100110100", "10011000", "11010", "100110101", "1111", "10000", "1110", "100111", "10010", "10011011", "1100", "10001", "01", "11011", "000110", "0000", "101", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "00010", "00011100", "10011001", "000", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "010", "1", "011", "0000", "01", "10000", "10011", "0001", "11", "101", "100100", "10001", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "100101", "0011100", "110", "00111100", "001101", "00111101", "00100", "000", "0011101", "00111111", "10111", "111", "010110", "011", "10110110", "100", "010111", "00111110", "1010", "00101", "10110111", "01010", "001100", "1011010", "101100", "0100", "101010", "111", "1010110", "110101", "1010111", "00", "10100", "01", "1100", "10110", "1000", "1001", "10111", "11011", "110100", "0100000", "10", "0100011", "111100", "011011010", "01100", "011011011", "11111", "011011100", "01001", "110", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "01000101", "000", "01111", "011011101", "1111010", "01101100", "011011110", "01110", "1111011", "011011111", "0101", "1110", "0100001", "0110100", "0110101", "01000100", "101010011", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "01001111", "01001110", "0100110", "101010010", "100001", "110111", "100000", "110101", "1010101", "000", "1101000", "1101001", "1101101", "010010", "0101", "1100", "111", "10100", "01000", "011", "10001", "10010", "1011", "101011", "10011", "10101000", "1101100", "011011", "000", "1010010", "101000", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "110", "1111", "1011", "010", "1010011", "0111", "11101", "100", "01100", "11100", "10101", "011010", "0", "1", "10011111", "111", "1001110", "100111100", "100100", "11001100", "10001", "100111101", "1101", "11001101", "100001", "11000", "101", "110011111", "100101", "010", "110010", "00100", "00101", "01100", "000", "11001110", "100110", "0111", "0011", "100000", "110011110", "01101", "10011100", "0", "100111100", "100111101", "111011", "1000", "11101011", "110011", "100111110", "10010", "1101", "11000", "11100", "100111111", "1110100", "111010100", "111010101", "11110", "1001101", "11111", "101", "110010", "10011101", "1001100", "11000011", "111", "11000100", "0111100", "01111110", "01101", "110000100", "0100", "110000101", "11000101", "101", "00", "1101", "0111101", "01111111", "0111110", "100", "11001", "0101", "01100", "01110", "1100000", "1100011", "1001100", "100000", "100111", "100001", "10001", "11100", "11101", "11110", "10010", "1001101", "0100", "111111", "110", "11111010", "0101", "00", "011", "101", "11111011", "1111100", "00010", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "1", "01", "0000", "000110", "000111", "011101", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "011100", "010", "1110", "000", "10", "011110", "011111", "11111", "110", "0110", "11110", "10", "0110", "0111", "1100", "111", "00", "010", "1101", "01010", "1", "010010", "0001", "0111", "011001", "0100110", "0100111", "0110000", "000001", "0010", "0110001", "000010", "01000", "000000", "01011", "01101", "0011", "000011", "100", "1110", "1111", "000", PhoneNumberUtil.REGION_CODE_FOR_NON_GEO_ENTITY, "110", "010", "101", "011", "1", "1", "1", "1", "1"};

    private static byte[] encoding(TreeMap<Byte, TreeMap<Byte, String>> treeMap, byte[] bArr) {
        if (bArr == null || bArr.length == 0) {
            return null;
        }
        if (!bInitialized) {
            init();
        }
        BitOutputStream bitOutputStream = new BitOutputStream(bArr.length * 8 * 3);
        TreeMap<Byte, String> treeMap2 = treeMap.get(new Byte((byte) 0));
        Byte b = new Byte(TsConstants.ACESType_h264);
        Byte b2 = new Byte((byte) 0);
        for (int i = 0; i < bArr.length; i++) {
            Byte bValueOf = Byte.valueOf(bArr[i]);
            String str = treeMap2.get(bValueOf);
            if (str == null) {
                String str2 = treeMap2.get(b);
                bitOutputStream.writeFromLSB(Integer.parseInt(str2, 2), str2.length());
                bitOutputStream.writeFromLSB(bArr[i], 8);
            } else {
                bitOutputStream.writeFromLSB(Integer.parseInt(str, 2), str.length());
            }
            treeMap2 = treeMap.get(bValueOf);
        }
        String str3 = treeMap2.get(b2);
        if (str3 == null) {
            String str4 = treeMap2.get(b);
            bitOutputStream.writeFromLSB(Integer.parseInt(str4, 2), str4.length());
            bitOutputStream.writeFromLSB(0, 8);
        } else {
            bitOutputStream.writeFromLSB(Integer.parseInt(str3, 2), str3.length());
        }
        byte[] byteArray = bitOutputStream.toByteArray();
        byte[] bArr2 = (bitOutputStream.getPos() & 7) != 0 ? new byte[(bitOutputStream.getPos() >> 3) + 1] : new byte[bitOutputStream.getPos() >> 3];
        for (int i2 = 0; i2 < bArr2.length; i2++) {
            bArr2[i2] = byteArray[i2];
        }
        return bArr2;
    }

    public static byte[] encoding_by_ATSC_C4(char[] cArr) {
        if (cArr == null || cArr.length == 0) {
            return null;
        }
        int length = cArr.length;
        byte[] bArr = new byte[length];
        for (int i = 0; i < length; i++) {
            bArr[i] = (byte) cArr[i];
        }
        return encoding(ATSC_C4_encode_map, bArr);
    }

    public static byte[] encoding_by_ATSC_C6(char[] cArr) {
        if (cArr == null || cArr.length == 0) {
            return null;
        }
        int length = cArr.length;
        byte[] bArr = new byte[length];
        for (int i = 0; i < length; i++) {
            bArr[i] = (byte) cArr[i];
        }
        return encoding(ATSC_C6_encode_map, bArr);
    }

    private static void init() {
        TreeMap<Byte, String> treeMap;
        TreeMap<Byte, String> treeMap2;
        int length = ATSC_C4_PRIOR.length;
        for (int i = 0; i < length; i++) {
            Byte bValueOf = Byte.valueOf(ATSC_C4_PRIOR[i]);
            Byte bValueOf2 = Byte.valueOf(ATSC_C4_SYMBOL[i]);
            String str = ATSC_C4_CODE[i];
            if (ATSC_C4_encode_map.containsKey(bValueOf)) {
                treeMap2 = ATSC_C4_encode_map.get(bValueOf);
            } else {
                treeMap2 = new TreeMap<>();
                ATSC_C4_encode_map.put(bValueOf, treeMap2);
            }
            treeMap2.put(bValueOf2, str);
        }
        int length2 = ATSC_C6_PRIOR.length;
        for (int i2 = 0; i2 < length2; i2++) {
            Byte bValueOf3 = Byte.valueOf(ATSC_C6_PRIOR[i2]);
            Byte bValueOf4 = Byte.valueOf(ATSC_C6_SYMBOL[i2]);
            String str2 = ATSC_C6_CODE[i2];
            if (ATSC_C6_encode_map.containsKey(bValueOf3)) {
                treeMap = ATSC_C6_encode_map.get(bValueOf3);
            } else {
                treeMap = new TreeMap<>();
                ATSC_C6_encode_map.put(bValueOf3, treeMap);
            }
            treeMap.put(bValueOf4, str2);
        }
        bInitialized = true;
    }

    public static byte[] encoding_by_ATSC_C4(byte[] bArr) {
        return encoding(ATSC_C4_encode_map, bArr);
    }

    public static byte[] encoding_by_ATSC_C6(byte[] bArr) {
        return encoding(ATSC_C6_encode_map, bArr);
    }
}
